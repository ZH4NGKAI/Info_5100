/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Business.Car;
import Business.CarInformationList;
import java.awt.CardLayout;
import java.awt.event.MouseEvent;
import java.awt.event.MouseAdapter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mac
 */
public class PassengerPanel extends javax.swing.JPanel {

    private JPanel rightPanel;
    private CarInformationList carList;    
    
    
    
    /**
     * Creates new form PassengerPanel
     * @param rightPanel
     * @param carList
     */
    public PassengerPanel(JPanel rightPanel, CarInformationList carList) {
        initComponents();
        this.rightPanel = rightPanel;
        this.carList = carList;
        populateTable(carList.carList);
        populateCombo();
        updateTime();
        tblCar.addMouseListener(new MouseAdapter()
        {
            @Override
            public void mouseClicked(MouseEvent event)
            {
                if(event.getClickCount() == 2){
                    int selectedRow = tblCar.rowAtPoint(event.getPoint());
                    Car car = (Car) tblCar.getValueAt(selectedRow, 0);
                    ViewPanel panel = new ViewPanel(rightPanel, car, carList);
                    rightPanel.add("ViewAccountJPanel", panel);
                    CardLayout layout = (CardLayout) rightPanel.getLayout();
                    layout.next(rightPanel);
                }
            }
        });
    }
    
    public void updateTime() {
        SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd hh:mm:ss");
        txtUpdateTime.setText(ft.format(carList.date));
    }
    public void populateTable(List<Car> list) {
        DefaultTableModel dtm = (DefaultTableModel)tblCar.getModel();
        dtm.setRowCount(0);
        
        for (Car car : list) {
            Object[] row = new Object[dtm.getColumnCount()];
            row[0] = car;
            row[1] = car.getBrand();
            row[2] = car.getModel_num();
            row[3] = car.getAvailble_city();
            dtm.addRow(row);
        }
    }
    
    public void populateCombo() {
        Set<String> brandSet = new HashSet();
        Set<Integer> yearSet = new HashSet();
        Set<String> modelSet = new HashSet();
        Set<String> citySet = new HashSet();
        for (Car car: carList.carList) {
            brandSet.add(car.getBrand());
            yearSet.add(car.getManufactured_year());
            modelSet.add(car.getModel_num());
            citySet.add(car.getAvailble_city());
        }
        
        comboManu.setModel(new DefaultComboBoxModel(brandSet.toArray()));
        comboYear.setModel(new DefaultComboBoxModel(yearSet.toArray()));
        comboModelNum.setModel(new DefaultComboBoxModel(modelSet.toArray()));
        comboCity.setModel(new DefaultComboBoxModel(citySet.toArray()));
        
        comboManu.insertItemAt("ALL", 0);
        comboYear.insertItemAt("ALL", 0);
        comboModelNum.insertItemAt("ALL", 0);
        comboCity.insertItemAt("ALL", 0);
        comboManu.setSelectedIndex(0);
        comboYear.setSelectedIndex(0);
        comboModelNum.setSelectedIndex(0);
        comboCity.setSelectedIndex(0);
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblCar = new javax.swing.JTable();
        btnSearch = new javax.swing.JButton();
        lblManu = new javax.swing.JLabel();
        lblYear = new javax.swing.JLabel();
        lblMaxSeats = new javax.swing.JLabel();
        lblMinSeats = new javax.swing.JLabel();
        lblModelNum = new javax.swing.JLabel();
        lblUpdateTime = new javax.swing.JLabel();
        lblCity = new javax.swing.JLabel();
        btnExpired = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        spinnerMaxSeats = new javax.swing.JSpinner();
        spinnerMinSeats = new javax.swing.JSpinner();
        comboManu = new javax.swing.JComboBox<>();
        comboYear = new javax.swing.JComboBox<>();
        comboModelNum = new javax.swing.JComboBox<>();
        comboCity = new javax.swing.JComboBox<>();
        txtSerialNum = new javax.swing.JTextField();
        btnSerialNum = new javax.swing.JButton();
        btnAvailable = new javax.swing.JButton();
        txtUpdateTime = new javax.swing.JTextField();
        btnfind = new javax.swing.JButton();

        tblCar.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        tblCar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Serial Number", "Brand", "Model Number", "City"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCar);
        if (tblCar.getColumnModel().getColumnCount() > 0) {
            tblCar.getColumnModel().getColumn(0).setResizable(false);
            tblCar.getColumnModel().getColumn(1).setResizable(false);
            tblCar.getColumnModel().getColumn(2).setResizable(false);
            tblCar.getColumnModel().getColumn(3).setResizable(false);
        }

        btnSearch.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        btnSearch.setText("Search Cars");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        lblManu.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        lblManu.setText("Manufacturer");

        lblYear.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        lblYear.setText("Manufactured Year");

        lblMaxSeats.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        lblMaxSeats.setText("Max Seats");

        lblMinSeats.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        lblMinSeats.setText("Min Seats");

        lblModelNum.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        lblModelNum.setText("Model Number");

        lblUpdateTime.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        lblUpdateTime.setText("Updated at:");

        lblCity.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        lblCity.setText("Available City");

        btnExpired.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        btnExpired.setText("Check Expiration");
        btnExpired.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExpiredActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        spinnerMaxSeats.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        spinnerMinSeats.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        comboManu.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboManuItemStateChanged(evt);
            }
        });
        comboManu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboManuActionPerformed(evt);
            }
        });

        comboModelNum.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));

        btnSerialNum.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        btnSerialNum.setText("Find by Serial Number");
        btnSerialNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSerialNumActionPerformed(evt);
            }
        });

        btnAvailable.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        btnAvailable.setText("Check Availability");
        btnAvailable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAvailableActionPerformed(evt);
            }
        });

        txtUpdateTime.setEnabled(false);

        btnfind.setText("Find An Available Car");
        btnfind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnfindActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(224, 224, 224)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblYear)
                                            .addComponent(lblManu))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(comboYear, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(comboManu, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblModelNum)
                                            .addComponent(lblCity, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(comboCity, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(comboModelNum, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(49, 49, 49)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(btnAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnSerialNum, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnExpired, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtSerialNum, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblMinSeats)
                                            .addComponent(lblMaxSeats))
                                        .addGap(22, 22, 22)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(spinnerMaxSeats, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                                            .addComponent(spinnerMinSeats))
                                        .addGap(9, 9, 9)
                                        .addComponent(btnfind))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblUpdateTime)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtUpdateTime, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(btnBack))
                .addContainerGap(105, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblUpdateTime)
                        .addComponent(txtUpdateTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMaxSeats)
                    .addComponent(spinnerMaxSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMinSeats)
                    .addComponent(spinnerMinSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnfind))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSerialNum, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtSerialNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAvailable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnExpired)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(249, 249, 249)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblManu)
                    .addComponent(comboManu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblYear)
                    .addComponent(comboYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblModelNum)
                    .addComponent(comboModelNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCity)
                    .addComponent(comboCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 155, Short.MAX_VALUE)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        List<Car> searchList = new ArrayList(carList.carList);
        Iterator<Car> iterator = searchList.iterator();
        
        if (comboYear.getSelectedIndex() != 0) {
            while (iterator.hasNext()) {
                Car car = iterator.next();
                if (car.getManufactured_year() != (Integer)comboYear.getSelectedItem())
                    iterator.remove();
            }
        }
        
        iterator = searchList.iterator();
        if (comboManu.getSelectedIndex() != 0) {
            while (iterator.hasNext()) {
                Car car = iterator.next();
                if (!car.getBrand().equals(comboManu.getSelectedItem()))
                    iterator.remove();
                
            }
        }
        
        iterator = searchList.iterator();
        if (comboModelNum.getSelectedIndex() != 0) {
            while (iterator.hasNext()) {
                Car car = iterator.next();
                if (!car.getModel_num().equals(comboModelNum.getSelectedItem()))
                    iterator.remove();
            }
        }
        
        iterator = searchList.iterator();
        if (comboCity.getSelectedIndex() != 0) {
            while (iterator.hasNext()) {
                Car car = iterator.next();
                if (!car.getAvailble_city().equals(comboCity.getSelectedItem()))
                    iterator.remove();
            }
        }
        populateTable(searchList);
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        rightPanel.remove(this);
        CardLayout layout = (CardLayout) rightPanel.getLayout();
        layout.previous(rightPanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void comboManuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboManuActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_comboManuActionPerformed

    private void comboManuItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboManuItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_comboManuItemStateChanged

    private void btnAvailableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAvailableActionPerformed
        // TODO add your handling code here:
        int avai = 0;
        int unavai;
        for (Car car: carList.carList) {
            if (car.isAvailable()) 
                avai++;
        }
        unavai = carList.carList.size() - avai;
        JOptionPane.showMessageDialog(null, "Available Car:"+avai
                +" & Unavailable Car:"+unavai);
    }//GEN-LAST:event_btnAvailableActionPerformed

    private void btnExpiredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExpiredActionPerformed
        // TODO add your handling code here:
        List<Car> expireList = new ArrayList();
        for (Car car: carList.carList) {
            if (!car.isMaintenance_certificate())
                expireList.add(car);
        }
        populateTable(expireList);
    }//GEN-LAST:event_btnExpiredActionPerformed

    private void btnSerialNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSerialNumActionPerformed
        // TODO add your handling code here:
//        if (txtSerialNum.getText().equals("")){
//            JOptionPane.showMessageDialog(null, "Please type in Serial Number!",
//                    "Warning", JOptionPane.WARNING_MESSAGE);
//            return;
//        }
        
        try {
            Integer.parseInt(txtSerialNum.getText());
        }
        catch(NumberFormatException e) {
            JOptionPane.showMessageDialog(null, 
                    "Please type in a integer number for Serial Number!");
            return;
        }
        
        for (Car car: carList.carList) {
            if (car.getSerial_num() == Integer.parseInt(txtSerialNum.getText())) {
                    ViewPanel panel = new ViewPanel(rightPanel, car, carList);
                    rightPanel.add("ViewAccountJPanel", panel);
                    CardLayout layout = (CardLayout) rightPanel.getLayout();
                    txtSerialNum.setText("");
                    layout.next(rightPanel);
                    return;
            }
        }
        JOptionPane.showMessageDialog(null, 
                "Cannot find car with this serial number!");
    }//GEN-LAST:event_btnSerialNumActionPerformed

    private void btnfindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnfindActionPerformed
        // TODO add your handling code here:
        int maxSeats = (Integer)spinnerMaxSeats.getValue();
        int minSeats = (Integer)spinnerMinSeats.getValue();
        if (maxSeats == 0 && minSeats == 0) {
            for (Car car: carList.carList) {
                if (car.isAvailable()) {
                    ViewPanel panel = new ViewPanel(rightPanel, car, carList);
                    rightPanel.add("ViewAccountJPanel", panel);
                    CardLayout layout = (CardLayout) rightPanel.getLayout();
                    layout.next(rightPanel);
                    return;
                }
            }
            JOptionPane.showMessageDialog(null, "Cannot find an available car!");
        }
        else if (minSeats > maxSeats) {
            JOptionPane.showMessageDialog(null, 
                    "Min seats cannot be larger than max seats!", 
                    "Warning", JOptionPane.WARNING_MESSAGE);
        }
        else {
            for (Car car: carList.carList) {
                if (car.getMin_seats() == minSeats 
                        && car.getMax_seats() <= maxSeats 
                        && car.isAvailable()) {
                    ViewPanel panel = new ViewPanel(rightPanel, car, carList);
                    rightPanel.add("ViewAccountJPanel", panel);
                    CardLayout layout = (CardLayout) rightPanel.getLayout();
                    layout.next(rightPanel);
                    return;
                }
            }
            JOptionPane.showMessageDialog(null, 
                    "Cannot find an available car with a minimum of "
                    + minSeats + " seats but no more than " 
                            + maxSeats + " seats!");
        }
    }//GEN-LAST:event_btnfindActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAvailable;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnExpired;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSerialNum;
    private javax.swing.JButton btnfind;
    private javax.swing.JComboBox<String> comboCity;
    private javax.swing.JComboBox<String> comboManu;
    private javax.swing.JComboBox<String> comboModelNum;
    private javax.swing.JComboBox<String> comboYear;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblManu;
    private javax.swing.JLabel lblMaxSeats;
    private javax.swing.JLabel lblMinSeats;
    private javax.swing.JLabel lblModelNum;
    private javax.swing.JLabel lblUpdateTime;
    private javax.swing.JLabel lblYear;
    private javax.swing.JSpinner spinnerMaxSeats;
    private javax.swing.JSpinner spinnerMinSeats;
    private javax.swing.JTable tblCar;
    private javax.swing.JTextField txtSerialNum;
    private javax.swing.JTextField txtUpdateTime;
    // End of variables declaration//GEN-END:variables
}

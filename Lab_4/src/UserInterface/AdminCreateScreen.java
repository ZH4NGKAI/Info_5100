/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface;

import Business.Users.Admin;
import Business.Users.Customer;
import Business.Users.Supplier;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.border.Border;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author AEDSpring2019
 */
public class AdminCreateScreen extends javax.swing.JPanel {

    /**
     * Creates new form AdminScreen
     */
    private JPanel panelRight;
    private Admin admin;
    public AdminCreateScreen(JPanel panelRight, Admin admin) {
        initComponents();
        this.panelRight = panelRight;
        this.admin = admin; 
        documentListener();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCreate = new javax.swing.JButton();
        txtUser = new javax.swing.JTextField();
        txtPword = new javax.swing.JTextField();
        txtRePword = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        radioCustomer = new javax.swing.JRadioButton();
        radioSupplier = new javax.swing.JRadioButton();
        btnBack = new javax.swing.JButton();

        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        txtUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUserActionPerformed(evt);
            }
        });

        txtRePword.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                txtRePwordInputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });

        jLabel1.setText("username:");

        jLabel2.setText("password:");

        jLabel3.setText("re-enter password :");

        radioCustomer.setText("Customer");
        radioCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioCustomerActionPerformed(evt);
            }
        });

        radioSupplier.setText("Supplier");
        radioSupplier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioSupplierActionPerformed(evt);
            }
        });

        btnBack.setText("< BACK");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPword, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtRePword, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(radioSupplier)
                                    .addComponent(radioCustomer)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(btnBack)))
                .addContainerGap(76, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBack)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRePword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radioCustomer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioSupplier)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCreate)
                .addContainerGap(47, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    //Set TextField listener, show red if wrong
    private void documentListener() {
        txtUser.getDocument().addDocumentListener(new DocumentListener(){
            
            Border border = new JTextField().getBorder();
            @Override
            public void changedUpdate(DocumentEvent e) {}
            
            @Override
            public void insertUpdate(DocumentEvent e) {
                if (txtUser.getText().equals("") || usernamePattern()){
                    txtUser.setBorder(border);
                    jLabel1.setForeground(Color.BLACK);
                }
                else {
                    txtUser.setBorder(BorderFactory.createLineBorder(Color.red));
                    jLabel1.setForeground(Color.red);
                }
            }
            
            @Override
            public void removeUpdate(DocumentEvent e) {
                if (txtUser.getText().equals("") || usernamePattern()){
                    txtUser.setBorder(border);
                    jLabel1.setForeground(Color.BLACK);
                }
                else {
                    txtUser.setBorder(BorderFactory.createLineBorder(Color.red));
                    jLabel1.setForeground(Color.red);
                }
            }

        });
        
        txtPword.getDocument().addDocumentListener(new DocumentListener(){
            
            Border border = new JTextField().getBorder();
            @Override
            public void changedUpdate(DocumentEvent e) {}
            
            @Override
            public void insertUpdate(DocumentEvent e) {
                if (txtPword.getText().equals("") || passwordPattern()){
                    txtPword.setBorder(border);
                    jLabel2.setForeground(Color.BLACK);
                }
                else {
                    txtPword.setBorder(BorderFactory.createLineBorder(Color.red));
                    jLabel2.setForeground(Color.red);
                }
            }
            
            @Override
            public void removeUpdate(DocumentEvent e) {
                if (txtPword.getText().equals("") || passwordPattern()){
                    txtPword.setBorder(border);
                    jLabel2.setForeground(Color.BLACK);
                }
                else {
                    txtPword.setBorder(BorderFactory.createLineBorder(Color.red));
                    jLabel2.setForeground(Color.red);
                }
            }

        });
        
        txtRePword.getDocument().addDocumentListener(new DocumentListener(){
            
            Border border = new JTextField().getBorder();
            @Override
            public void changedUpdate(DocumentEvent e) {}
            
            @Override
            public void insertUpdate(DocumentEvent e) {
                if (!txtRePword.getText().equals(txtPword.getText())){
                    txtRePword.setBorder(BorderFactory.createLineBorder(Color.red));
                    jLabel3.setForeground(Color.red);
                }
                else {
                    txtRePword.setBorder(border);
                    jLabel3.setForeground(Color.BLACK);
                }
            }
            
            @Override
            public void removeUpdate(DocumentEvent e) {
                if (!txtRePword.getText().equals(txtPword.getText())){
                    txtRePword.setBorder(BorderFactory.createLineBorder(Color.red));
                    jLabel3.setForeground(Color.red);
                }
                else {
                    txtRePword.setBorder(border);
                    jLabel3.setForeground(Color.BLACK);
                }
            }

        });
        
        
    }
    
    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
        String username = txtUser.getText();
        String p1 = txtPword.getText();
        String p2 = txtRePword.getText();
        
        if (username == null || username.equals("")) {
            JOptionPane.showMessageDialog(null, "empty username");
            return;
        }
        
        if (!usernamePattern()){
            JOptionPane.showMessageDialog(null, "email should be in a format xxx_xxx@xxx.xxx");
            return;
        }
        
        if (p1 == null || p1.equals("")) {
            JOptionPane.showMessageDialog(null, "empty password");
            return;
        }
        if (!passwordPattern()) {
            JOptionPane.showMessageDialog(null, "Password should be at least 6 "
                    + "digits and contain at least one upper case letter,"
                    + " one lower case letter, one digit and one special "
                    + "character $, *, # or &.");
            return;
        }
        if (!p1.equals(p2)) {
            JOptionPane.showMessageDialog(null, "Password mismatch");
        }
        
        if (radioSupplier.isSelected()) {
            Supplier supp = new Supplier(p2, username);        
            this.admin.getSuppDir().getSupplierList().add(supp);
            JOptionPane.showMessageDialog(null, "Supplier created successfully!");
            txtUser.setText("");
            txtPword.setText("");
            txtRePword.setText("");
            radioCustomer.setSelected(false);
            radioSupplier.setSelected(false);
        }
        else if (radioCustomer.isSelected()) {
            Customer cust = new Customer(p2, username);
            this.admin.getCustDir().getCustomerList().add(cust);
            cust.setDate(new Date());
            JOptionPane.showMessageDialog(null, "Customer created successfully!");
            txtUser.setText("");
            txtPword.setText("");
            txtRePword.setText("");
            radioCustomer.setSelected(false);
            radioSupplier.setSelected(false);
        }
    }//GEN-LAST:event_btnCreateActionPerformed
    
    //define pattern of user name
    private boolean usernamePattern() {
        Pattern p = Pattern.compile("^[a-zA-Z0-9]+_[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$");
        Matcher m = p.matcher(txtUser.getText());
        boolean b = m.matches();
        return b;
    }
    
    //define pattern of password
    private boolean passwordPattern() {
        Pattern p = Pattern.compile("^(?:(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9]))(?=.*[$*#&]).{6,}$");
        Matcher m = p.matcher(txtPword.getText());
        boolean b = m.matches();
        return b;
    }
    
    private void radioCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioCustomerActionPerformed
        // TODO add your handling code here:
        if (radioSupplier.isSelected())
            radioSupplier.setSelected(false);
    }//GEN-LAST:event_radioCustomerActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed

        CardLayout layout = (CardLayout)panelRight.getLayout();
        panelRight.remove(this);
        Component[] comps = this.panelRight.getComponents();
        for (Component comp: comps) {
            if (comp instanceof AdminMainScreen) {
                AdminMainScreen panel = (AdminMainScreen) comp;
                panel.populate();
            }
        }
        layout.previous(panelRight);
    }//GEN-LAST:event_btnBackActionPerformed

    private void radioSupplierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioSupplierActionPerformed
        // TODO add your handling code here:
        if (radioCustomer.isSelected())
            radioCustomer.setSelected(false);
    }//GEN-LAST:event_radioSupplierActionPerformed

    private void txtUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUserActionPerformed

    private void txtRePwordInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_txtRePwordInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRePwordInputMethodTextChanged

    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCreate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JRadioButton radioCustomer;
    private javax.swing.JRadioButton radioSupplier;
    private javax.swing.JTextField txtPword;
    private javax.swing.JTextField txtRePword;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables
}

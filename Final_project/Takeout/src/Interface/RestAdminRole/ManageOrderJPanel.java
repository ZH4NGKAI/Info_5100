/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.RestAdminRole;

import Business.Employee.Employee;
import Business.Enterprise.RestaurantEnterprise;
import Business.Food.Food;
import Business.Network.Network;
import Business.Organization.Organization;
import static Business.Organization.Organization.Type.Chef;
import Business.Role.ChefRole;
import Business.Role.Role;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.CookWorkRequest;
import Business.WorkQueue.OrderWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author wangbaichao
 */
public class ManageOrderJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageOrderJPanel
     */
    
    private RestaurantEnterprise enterprise;
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    public ManageOrderJPanel(JPanel userProcessContainer,UserAccount userAccount,RestaurantEnterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.userAccount=userAccount;
        
        populateTable();
        popChefComboBox();
    }
    
    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel)orderRequestTable.getModel();
        
        model.setRowCount(0);
        
        for(WorkRequest request : enterprise.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[4];
            row[0] = (OrderWorkRequest)request;
            row[1] = ((OrderWorkRequest)request).getFoodDirectory().getFoodList().size();
            row[2] = ((OrderWorkRequest)request).getTotal();
            row[3] = request.getStatus();
            
            model.addRow(row);
        }
    }
    
    public void popChefComboBox()
    {
        chefComboBox.removeAllItems();
        
//        if(enterprise.getUserAccountDirectory().getUserAccountList().isEmpty()){
//            JOptionPane.showMessageDialog(null, "No Chef, No Order!");
//            return;
//        }
        
        for(Organization ori : enterprise.getOrganizationDirectory().getOrganizationList()){
            for (UserAccount u : ori.getUserAccountDirectory().getUserAccountList())
                {
                    if(u.getRole().getRoleType().equals(Role.RoleType.Chef)){
               
                    chefComboBox.addItem(u);
                }
            
            }
        }
//        for(UserAccount u : enterprise.getUserAccountDirectory().getUserAccountList()){
//            //System.out.println(u.getRole().getRoleType());
//            
//            if(u.getRole().getRoleType() == Role.RoleType.Chef){
//                chefComboBox.addItem(u);
//            }
//        }
        
        
        chefComboBox.setSelectedIndex(-1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderRequestTable = new javax.swing.JTable();
        btnDetials = new javax.swing.JButton();
        btnSent = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        chefComboBox = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(249, 246, 246));

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel4.setText("Manage Order");

        orderRequestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Order Work Request", "Food Number", "Total price", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(orderRequestTable);

        btnDetials.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        btnDetials.setText("View Detials");
        btnDetials.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetialsActionPerformed(evt);
            }
        });

        btnSent.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        btnSent.setText("Send to Chef");
        btnSent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSentActionPerformed(evt);
            }
        });

        backJButton.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        chefComboBox.setBackground(new java.awt.Color(255, 255, 255));
        chefComboBox.setFont(new java.awt.Font("Mshtakan", 1, 14)); // NOI18N
        chefComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Chef" }));
        chefComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chefComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(26, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 558, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnDetials, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSent, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chefComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(330, 330, 330)
                                .addComponent(jLabel4))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnDetials, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSent, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chefComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)))
                .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void btnDetialsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetialsActionPerformed
        // TODO add your handling code here:
        int selectedRow = orderRequestTable.getSelectedRow();

        if(selectedRow>=0){
            OrderWorkRequest a = (OrderWorkRequest)orderRequestTable.getValueAt(selectedRow, 0);
            CardLayout layout = (CardLayout)userProcessContainer.getLayout();
            userProcessContainer.add("UpdateAirplaneJPanel", 
                new requestDetialJPanel(userProcessContainer,enterprise, a));
            layout.next(userProcessContainer);

        }
        else{
            JOptionPane.showMessageDialog(null, "Please select a Row!!");
        }
    }//GEN-LAST:event_btnDetialsActionPerformed

    private void btnSentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSentActionPerformed
        // TODO add your handling code here:
        if(orderRequestTable.getSelectedRow()<0)
        {
            JOptionPane.showMessageDialog(null, "Please select a request first!");
            return;
        }
        if(chefComboBox.getSelectedIndex() < 0) {
            JOptionPane.showMessageDialog(null, "Please select a chef!");
            return;
        }
        
        OrderWorkRequest r = (OrderWorkRequest)orderRequestTable.getValueAt(orderRequestTable.getSelectedRow(), 0);
        
        String status = r.getStatus();
        System.out.println(status);
        if(status.equals("Restaurant Get The Order")){
            CookWorkRequest cookOrder = new CookWorkRequest(r);
            UserAccount chefUserAccount = (UserAccount)chefComboBox.getSelectedItem();
            chefUserAccount.getWorkQueue().getWorkRequestList().add(cookOrder);
            cookOrder.getOrderWorkRequest().setStatus("cooking");
            cookOrder.setSender(userAccount);
            cookOrder.setReceiver(chefUserAccount);
            populateTable();
            popChefComboBox();
            JOptionPane.showMessageDialog(null, "Request successfully sent!");
            return;
        }
        else if(!status.equals("Restaurant Get The Order")){
            JOptionPane.showMessageDialog(null, "Request can't be sent!");
            return;
        }
        
           
       
        
    }//GEN-LAST:event_btnSentActionPerformed

    private void chefComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chefComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chefComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JButton btnDetials;
    private javax.swing.JButton btnSent;
    private javax.swing.JComboBox<Object> chefComboBox;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable orderRequestTable;
    // End of variables declaration//GEN-END:variables
}
